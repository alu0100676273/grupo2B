\section{Algoritmo XXX}
\label{Apendice1:XXX}

\begin{center}
\begin{footnotesize}
\begin{verbatim}

###################################################################################
# ReglaTrapecio.py
###################################################################################
#
# AUTORES
#  Samanta Belén Lara Giannone - Óscar Méndez Villavicencio - Nuria Cecilia Martín Cruz 
# FECHA
#  16 de mayo de 2013
# DESCRIPCION
#  En este programa de python se realizan las aproximaciones de la integral definida de 
#  la función en particular por medio de la regla del trapecio simple y del trapecio
#  compuesta. 
###################################################################################
#! usr/bin/python
import random,sys
from math import *
def f(x) :
  funcion=(1/sqrt(2*pi))*exp(-(x**2)/2.0)
  return funcion

def trapecio_simple(f,A,B) :
  simple=(B-A)*((f(A)+f(B))/2)
  return simple
  
def trapecio_compuesto(f,A,B,n) :
  k=1
  valor=0
  while k <= n-1 :
    c=A+k*(B-A)/n
    valor+=f(c)
    k += 1
  compuesta=((B-A)/n)*((f(A) + f(B))/2.0 + valor)
  return compuesta
   
if __name__=='__main__':
  
  if len(sys.argv) < 4 :
    print 'Has introducido menos argumentos de los necesarios'\n
    
  elif len(sys.argv) == 4 :
    A=float(sys.argv[1])
    B=float(sys.argv[2])
    n=float(sys.argv[3])
    print 'El resultado de la regla del trapecio simple es', trapecio_simple(f,A,B)
    print 'El resultado de la regla del trapecio compuesta es', trapecio_compuesto(f,A,B,n)
\end{verbatim}
\end{footnotesize}
\end{center}

\section{Algoritmo YYY}
\label{Apendice1:YYY}


\begin{center}
\begin{footnotesize}
\begin{verbatim}

/###################################################################################
 # tiempotime.py
 ###################################################################################
 #
 # AUTORES
 #  Samanta Belén Lara Giannone - Óscar Méndez Villavicencio - Nuria Cecilia Martín Cruz
 # FECHA
 #  16 de mayo de 2013
 # DESCRIPCION
 #  En este programa python se compara el tiempo de ejecucion al realizar la 
 #  regla del trapecio simple y la regla del trapecio compuesta
 ##################################################################################
#!/usr/local/bin/python

import sys, os
from math import *
from ReglaTrapecio import *
import time


def Tiempo_simple() :
  e0 = time.time() 
  c0 = time.clock() 
  r=trapecio_simple(f,A,B)
  elapsed_time = time.time() - e0
  cpu_time = time.clock() - c0
  tiempoa=cpu_time
  return tiempoa
  
def Tiempo_compuesto() :
  e0 = time.time() 
  c0 = time.clock() 
  r=trapecio_compuesto(f,A,B,n)
  elapsed_time = time.time() - e0
  cpu_time = time.clock() - c0
  tiempob=cpu_time
  return tiempob

if __name__=='__main__':
  
  if len(sys.argv) == 5 :
     modulo=(sys.argv[0])
     A=int(sys.argv[1])
     B=int(sys.argv[2])
     n=int(sys.argv[3]) #numero de divisiones
     C=int(sys.argv[4]) #numero de test
     a=Tiempo_simple()
     b=Tiempo_compuesto()
     if a < b :
       print 'La ejecucion de la Regla del trapecio simple es menor que la ejecucion de la regla del Trapecio compuesto'
       porcentaje=(a/b)*100
       print porcentaje
     elif a == b :
       print 'Tiempos iguales' 
     else :
       print 'La ejecucion de la Regla del trapecio simple es menor que la ejecucion de la regla del Trapecio compuesto'
       porcentaje=(b/a)*100
       print porcentaje
	 
  else :
     print 'Has introducido unos argumentos incorrectos, introduce:'
     print modulo.py, A, B, n, C 
\end{verbatim}
\end{footnotesize}
\end{center}
